"""
Data Cleansing Pipeline - Quick Demo
‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß

This script demonstrates the key features of the data cleansing pipeline
using sample data to show the complete workflow.
"""

import pandas as pd
import os
import sys
from pathlib import Path

# Add modules to path
sys.path.insert(0, str(Path(__file__).parent))

from modules.data_loader import DataLoader
from modules.data_cleaner import DataCleaner
from modules.data_transformer import DataTransformer
from modules.data_validator import DataValidator
from modules.reporter import Reporter
from modules.utils import setup_logging, load_config
import logging


def run_demo():
    """
    ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    Run the complete data cleansing pipeline demo.
    """
    print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print("üéØ Starting Data Cleansing Pipeline Demo")
    print("=" * 60)
    
    # Setup logging
    setup_logging()
    logger = logging.getLogger(__name__)
    logger.info("Starting demo session")
    
    # Load configuration
    config = load_config("config/config.yaml")
    if config is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå config ‡πÑ‡∏î‡πâ")
        print("‚ùå Could not load config file")
        return False
    
    # Initialize modules
    loader = DataLoader(config)
    cleaner = DataCleaner()
    transformer = DataTransformer()
    validator = DataValidator()
    reporter = Reporter()
    
    try:
        # Step 1: Load sample data
        print("\nüìÇ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        print("üìÇ Step 1: Loading sample data")
        print("-" * 40)
        
        sample_file = "data/raw/sample_employee_data.csv"
        if not os.path.exists(sample_file):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {sample_file}")
            print("‚ùå Sample file not found - creating sample data...")
            create_sample_data()
        
        data = loader.load_data(sample_file)
        if data is not None:
            print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(data)} ‡πÅ‡∏ñ‡∏ß, {len(data.columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
            print(f"‚úÖ Data loaded successfully: {len(data)} rows, {len(data.columns)} columns")
            
            # Show data preview
            print("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å):")
            print("üìã Data Preview (First 5 rows):")
            print(data.head())
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return False
        
        # Step 2: Validate original data quality
        print("\nüîç ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°")
        print("üîç Step 2: Validating original data quality")
        print("-" * 40)
        
        original_validation = validator.validate_data(data)
        print(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°: {original_validation['quality_score']:.2f}")
        print(f"üìä Original Quality Score: {original_validation['quality_score']:.2f}")
        
        print("üö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö / Issues Found:")
        for issue in original_validation['issues'][:3]:  # Show first 3 issues
            print(f"   ‚Ä¢ {issue}")
        
        # Step 3: Clean the data
        print("\nüßπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        print("üßπ Step 3: Cleaning the data")
        print("-" * 40)
        
        cleaning_result = cleaner.clean_data(data)
        cleaned_data = cleaning_result['cleaned_data']
        cleaning_log = cleaning_result['log']
        
        print(f"‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(cleaned_data)} ‡πÅ‡∏ñ‡∏ß")
        print(f"‚úÖ Cleaning completed: {len(cleaned_data)} rows remaining")
        
        print("üìù ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ / Actions Performed:")
        for action in cleaning_log[:3]:  # Show first 3 actions
            print(f"   ‚Ä¢ {action}")
        
        # Step 4: Transform data
        print("\nüîÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        print("üîÑ Step 4: Transforming data")
        print("-" * 40)
        
        # Example transformation: create age groups
        if 'age' in cleaned_data.columns:
            def age_group(age):
                if pd.isna(age):
                    return 'Unknown'
                elif age < 30:
                    return 'Young'
                elif age < 50:
                    return 'Middle'
                else:
                    return 'Senior'
            
            transform_result = transformer.create_feature(
                cleaned_data, 
                'age_group', 
                age_group, 
                ['age']
            )
            
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: age_group")
            print("‚úÖ Created new feature: age_group")
            print(f"üìä ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏:")
            print(transform_result['age_group'].value_counts())
        else:
            transform_result = cleaned_data
        
        # Step 5: Final validation
        print("\n‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢")
        print("‚úÖ Step 5: Final data quality validation")
        print("-" * 40)
        
        final_validation = validator.validate_data(transform_result)
        print(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: {final_validation['quality_score']:.2f}")
        print(f"üìä Final Quality Score: {final_validation['quality_score']:.2f}")
        
        improvement = final_validation['quality_score'] - original_validation['quality_score']
        if improvement > 0:
            print(f"üìà ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: +{improvement:.2f}")
            print(f"üìà Quality Improvement: +{improvement:.2f}")
        else:
            print(f"üìâ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {improvement:.2f}")
            print(f"üìâ Quality Change: {improvement:.2f}")
        
        # Step 6: Generate report
        print("\nüìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
        print("üìä Step 6: Generating report")
        print("-" * 40)
        
        report_path = "data/processed/demo_report.html"
        success = reporter.save_report(
            transform_result,
            final_validation,
            cleaning_log,
            report_path,
            format='html'
        )
        
        if success:
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {report_path}")
            print(f"‚úÖ Report saved successfully: {report_path}")
        
        # Step 7: Save cleaned data
        print("\nüíæ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß")
        print("üíæ Step 7: Saving cleaned data")
        print("-" * 40)
        
        output_path = "data/processed/cleaned_employee_data.csv"
        transform_result.to_csv(output_path, index=False, encoding='utf-8')
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {output_path}")
        print(f"‚úÖ Cleaned data saved: {output_path}")
        
        # Demo summary
        print("\n" + "=" * 60)
        print("üéâ ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! / Demo Completed!")
        print("=" * 60)
        print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå / Summary:")
        print(f"   ‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° / Original data: {len(data)} ‡πÅ‡∏ñ‡∏ß")
        print(f"   ‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∞‡∏≠‡∏≤‡∏î / Cleaned data: {len(transform_result)} ‡πÅ‡∏ñ‡∏ß")
        print(f"   ‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏° / Original quality: {original_validation['quality_score']:.2f}")
        print(f"   ‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ / Final quality: {final_validation['quality_score']:.2f}")
        print(f"   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á / Improvement: {improvement:+.2f}")
        print(f"\nüìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á / Generated files:")
        print(f"   ‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / Report: {report_path}")
        print(f"   ‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∞‡∏≠‡∏≤‡∏î / Cleaned data: {output_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        print(f"‚ùå Error occurred: {str(e)}")
        logger.error(f"Demo failed: {str(e)}")
        return False


def create_sample_data():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå"""
    print("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...")
    
    sample_data = pd.DataFrame({
        'id': [1, 2, 3, 4, 5, 6, 7],
        'name': ['Alice', 'Bob', 'Charlie', None, 'Eve', 'Frank', 'Alice'],  # Duplicate and null
        'email': ['alice@test.com', 'bob@test.com', 'invalid_email', 'david@test.com', 'eve@test.com', 'frank@test.com', 'alice@test.com'],
        'age': [25, 30, 35, 40, 150, 45, 25],  # Outlier
        'salary': [50000, 60000, 70000, None, 90000, 85000, 50000],  # Null
        'department': ['IT', 'HR', 'IT', 'Finance', 'IT', 'HR', 'IT']
    })
    
    os.makedirs("data/raw", exist_ok=True)
    sample_data.to_csv("data/raw/sample_employee_data.csv", index=False, encoding='utf-8')
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print("üöÄ Starting Data Cleansing Pipeline Demo")
    print("=" * 60)
    
    # Ensure output directories exist
    os.makedirs("data/processed", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    
    success = run_demo()
    
    if success:
        print("\nüéä ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:")
        print("üéä Demo successful! Try the interactive mode:")
        print("   python main_thai.py -i")
    else:
        print("\nüí• ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log")
        print("üí• Demo failed - please check the logs")
