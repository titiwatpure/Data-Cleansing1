import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
import pandas as pd
import os
import numpy as np
from datetime import datetime
import json
import warnings
warnings.filterwarnings('ignore')


class DataCleaningApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üßπ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô üáπüá≠")
        self.root.geometry("1400x900")
        self.data = None
        self.original_data = None
        self.cleaned_data = None
        self.cleaning_history = []
        self.undo_stack = []
        self.redo_stack = []

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ UI
        self.info_var = tk.StringVar()
        self.status_var = tk.StringVar()
        self.tree = None

        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.settings = {
            'auto_clean': False,
            'fill_method': 'mean',  # mean, median, mode, zero, forward, backward, interpolate, remove
            'duplicate_method': 'first',  # first, last, all
            'outlier_method': 'zscore',  # zscore, iqr, isolation_forest, none
            'outlier_threshold': 3.0,
            'date_format': '%Y-%m-%d',
            'encoding': 'utf-8-sig',
            'decimal_places': 2,
            'show_preview': True,
            'backup_original': True,
            'working_mode': 'standard',  # beginner, standard, expert
            'max_display_rows': 1000,
            'auto_detect_types': True,
            'standardize_text': True,
            'remove_whitespace': True,
            'clean_email': True,
            'clean_phone': True,
            'validate_dates': True,
            'custom_fill_values': {},
            'column_specific_settings': {}
        }

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        self.load_settings()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå
        self.style = ttk.Style()
        self.style.theme_use('clam')

        self.create_menu()
        self.create_widgets()

    def create_widgets(self):
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
        title_frame = ttk.Frame(self.root)
        title_frame.pack(fill='x', padx=10, pady=5)

        title_label = ttk.Label(title_frame, text="üßπ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô üáπüá≠",
                                font=("Arial", 18, "bold"))
        title_label.pack()

        # ‡πÅ‡∏ñ‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
        self.create_info_panel()

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        self.create_control_panel()

        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.create_data_panel()

        # ‡πÅ‡∏ñ‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.create_status_bar()

    def create_info_panel(self):
        info_frame = ttk.LabelFrame(self.root, text="üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ")
        info_frame.pack(fill='x', padx=10, pady=5)

        self.info_var = tk.StringVar()
        self.info_var.set(
            "üîç ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

        info_label = ttk.Label(info_frame, textvariable=self.info_var,
                               font=("Arial", 11), foreground="blue")
        info_label.pack(pady=8)

    def create_control_panel(self):
        control_frame = ttk.LabelFrame(
            self.root, text="üõ†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
        control_frame.pack(fill='x', padx=10, pady=5)

        # ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 - ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å
        row1 = ttk.Frame(control_frame)
        row1.pack(fill='x', padx=10, pady=5)

        ttk.Button(row1, text="üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå", command=self.open_file,
                   width=15).pack(side='left', padx=3)
        ttk.Button(row1, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", command=self.save_file,
                   width=15).pack(side='left', padx=3)
        ttk.Button(row1, text="üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                   command=self.clean_all, width=20).pack(side='left', padx=3)
        ttk.Button(row1, text="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", command=self.show_stats,
                   width=15).pack(side='left', padx=3)

        # ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        row2 = ttk.Frame(control_frame)
        row2.pack(fill='x', padx=10, pady=5)

        ttk.Button(row2, text="üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥",
                   command=self.remove_duplicates, width=15).pack(side='left', padx=3)
        ttk.Button(row2, text="üîß ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á", command=self.fill_missing,
                   width=15).pack(side='left', padx=3)
        ttk.Button(row2, text="üßº ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á", command=self.remove_empty_rows,
                   width=15).pack(side='left', padx=3)
        ttk.Button(row2, text="üìã ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", command=self.compare_data,
                   width=15).pack(side='left', padx=3)

        # ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 3 - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        row3 = ttk.Frame(control_frame)
        row3.pack(fill='x', padx=10, pady=5)

        ttk.Button(row3, text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï", command=self.reset_data,
                   width=15).pack(side='left', padx=3)
        ttk.Button(row3, text="üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
                   command=self.export_report, width=15).pack(side='left', padx=3)
        ttk.Button(row3, text="üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
                   command=self.validate_data, width=15).pack(side='left', padx=3)
        ttk.Button(row3, text="‚ùå ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", command=self.root.quit,
                   width=15).pack(side='left', padx=3)

    def create_data_panel(self):
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        data_frame = ttk.LabelFrame(self.root, text="üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        data_frame.pack(fill='both', expand=True, padx=10, pady=5)

        # Treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        tree_frame = ttk.Frame(data_frame)
        tree_frame.pack(fill='both', expand=True, padx=5, pady=5)

        self.tree = ttk.Treeview(tree_frame)

        # Scrollbars
        v_scrollbar = ttk.Scrollbar(
            tree_frame, orient="vertical", command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(
            tree_frame, orient="horizontal", command=self.tree.xview)

        self.tree.configure(yscrollcommand=v_scrollbar.set,
                            xscrollcommand=h_scrollbar.set)

        # ‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Grid
        self.tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')

        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)

    def create_status_bar(self):
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.status_var = tk.StringVar()
        self.status_var.set("‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

        status_frame = ttk.Frame(self.root)
        status_frame.pack(fill='x', padx=10, pady=5)

        status_label = ttk.Label(status_frame, textvariable=self.status_var,
                                 relief='sunken', font=("Arial", 10))
        status_label.pack(fill='x')

    def open_file(self):
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            filetypes=[
                ("Excel files", "*.xlsx *.xls"),
                ("CSV files", "*.csv"),
                ("All files", "*.*")
            ]
        )

        if file_path:
            try:
                # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if file_path.endswith('.csv'):
                    # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
                    encodings = ['utf-8', 'utf-8-sig', 'cp874', 'iso-8859-1']
                    data_loaded = False

                    for encoding in encodings:
                        try:
                            self.data = pd.read_csv(
                                file_path, encoding=encoding)
                            data_loaded = True
                            break
                        except UnicodeDecodeError:
                            continue

                    if not data_loaded:
                        self.data = pd.read_csv(
                            file_path, encoding='utf-8', encoding_errors='ignore')
                else:
                    self.data = pd.read_excel(file_path)

                if self.data is not None:
                    self.original_data = self.data.copy()
                    self.cleaning_history = []
                    self.update_display()
                    self.update_info_panel()

                    filename = os.path.basename(file_path)
                    self.status_var.set(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
                else:
                    raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")

            except Exception as e:
                messagebox.showerror(
                    "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:\n{str(e)}")

    def update_info_panel(self):
        if self.data is not None:
            rows, cols = self.data.shape
            missing = self.data.isnull().sum().sum()
            duplicates = self.data.duplicated().sum()
            memory_mb = self.data.memory_usage(deep=True).sum() / 1024 / 1024

            info_text = (f"üìä ‡πÅ‡∏ñ‡∏ß: {rows:,} | ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {cols:,} | "
                         f"‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á: {missing:,} | ‡∏ã‡πâ‡∏≥: {duplicates:,} | "
                         f"‡∏Ç‡∏ô‡∏≤‡∏î: {memory_mb:.1f} MB")

            self.info_var.set(info_text)

    def save_file(self):
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            return

        file_path = filedialog.asksaveasfilename(
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå",
            defaultextension=".xlsx",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("CSV files", "*.csv"),
                ("All files", "*.*")
            ]
        )

        if file_path:
            try:
                if file_path.endswith('.csv'):
                    self.data.to_csv(file_path, index=False,
                                     encoding='utf-8-sig')
                else:
                    self.data.to_excel(file_path, index=False)
                filename = os.path.basename(file_path)
                self.status_var.set(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")

            except Exception as e:
                messagebox.showerror(
                    "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:\n{str(e)}")

    def clean_all(self):
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
            return

        # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        result = messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                                     "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n"
                                     "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ")
        if not result:
            return

        try:
            original_rows = len(self.data)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self.cleaning_history.append(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {original_rows:,} ‡πÅ‡∏ñ‡∏ß")

            # 1. ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            before_empty = len(self.data)
            self.data = self.data.dropna(how='all')
            empty_removed = before_empty - len(self.data)
            if empty_removed > 0:
                self.cleaning_history.append(
                    f"‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á: {empty_removed:,} ‡πÅ‡∏ñ‡∏ß")

            # 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
            before_dup = len(self.data)
            self.data = self.data.drop_duplicates()
            dup_removed = before_dup - len(self.data)
            if dup_removed > 0:
                self.cleaning_history.append(
                    f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: {dup_removed:,} ‡πÅ‡∏ñ‡∏ß")

            # 3. ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
            missing_before = self.data.isnull().sum().sum()

            for col in self.data.columns:
                if self.data[col].dtype in ['int64', 'float64']:
                    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                    mean_val = self.data[col].mean()
                    if pd.notna(mean_val):
                        self.data[col] = self.data[col].fillna(mean_val)
                else:
                    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    try:
                        mode_val = self.data[col].mode()
                        if len(mode_val) > 0 and pd.notna(mode_val.iloc[0]):
                            self.data[col] = self.data[col].fillna(
                                mode_val.iloc[0])
                        else:
                            self.data[col] = self.data[col].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                    except (ValueError, IndexError, TypeError):
                        self.data[col] = self.data[col].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                        self.data[col] = self.data[col].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')

            missing_after = self.data.isnull().sum().sum()
            filled = missing_before - missing_after
            if filled > 0:
                self.cleaning_history.append(f"‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á: {filled:,} ‡∏Ñ‡πà‡∏≤")

            # 4. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.standardize_data_types()

            cleaned_rows = len(self.data)
            total_removed = original_rows - cleaned_rows

            self.update_display()
            self.update_info_panel()

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            report = f"""üéâ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!

üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:
‚Ä¢ ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏¥‡∏°: {original_rows:,}
‚Ä¢ ‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î: {cleaned_rows:,}
‚Ä¢ ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_removed:,}

üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
{chr(10).join('‚Ä¢ ' + item for item in self.cleaning_history)}

‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!"""

            self.status_var.set(
                f"‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {cleaned_rows:,} ‡πÅ‡∏ñ‡∏ß")
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", report)

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:\n{str(e)}")

    def standardize_data_types(self):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"""
        if self.data is None:
            return

        for col in self.data.columns:
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            if self.data[col].dtype == 'object':
                try:
                    # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    pd.to_datetime(self.data[col], errors='raise')
                    self.data[col] = pd.to_datetime(
                        self.data[col], errors='coerce')
                    self.cleaning_history.append(
                        f"‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col}' ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
                except (ValueError, TypeError):
                    # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                    try:
                        numeric_data = pd.to_numeric(
                            self.data[col], errors='raise')
                        self.data[col] = numeric_data
                        self.cleaning_history.append(
                            f"‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col}' ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                    except (ValueError, TypeError):
                        pass

    def remove_duplicates(self):
        """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return

        try:
            self.save_to_undo_stack()
            original_count = len(self.data)

            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            method = self.settings.get('duplicate_method', 'first')
            if method == 'first':
                self.data = self.data.drop_duplicates(keep='first')
            elif method == 'last':
                self.data = self.data.drop_duplicates(keep='last')
            else:  # 'all'
                self.data = self.data.drop_duplicates(keep=False)

            removed_count = original_count - len(self.data)

            self.update_display()
            self.update_info_panel()

            if removed_count > 0:
                self.cleaning_history.append(
                    f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: {removed_count:,} ‡πÅ‡∏ñ‡∏ß")
                self.status_var.set(
                    f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {removed_count:,} ‡πÅ‡∏ñ‡∏ß")
                messagebox.showinfo(
                    "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ {removed_count:,} ‡πÅ‡∏ñ‡∏ß")
            else:
                messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥")

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ:\n{str(e)}")

    def fill_missing(self):
        """‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return

        try:
            self.save_to_undo_stack()
            missing_before = self.data.isnull().sum().sum()

            if missing_before == 0:
                messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                return

            # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            method = self.settings.get('fill_method', 'mean')

            for col in self.data.columns:
                if self.data[col].isnull().any():
                    if self.data[col].dtype in ['int64', 'float64']:
                        if method == 'mean':
                            self.data[col].fillna(
                                self.data[col].mean(), inplace=True)
                        elif method == 'median':
                            self.data[col].fillna(
                                self.data[col].median(), inplace=True)
                        elif method == 'zero':
                            self.data[col].fillna(0, inplace=True)
                    else:
                        if method == 'mode':
                            mode_val = self.data[col].mode()
                            if len(mode_val) > 0:
                                self.data[col].fillna(
                                    mode_val[0], inplace=True)
                        else:
                            self.data[col].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inplace=True)

            missing_after = self.data.isnull().sum().sum()
            filled_count = missing_before - missing_after

            self.update_display()
            self.update_info_panel()

            if filled_count > 0:
                self.cleaning_history.append(
                    f"‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á: {filled_count:,} ‡∏Ñ‡πà‡∏≤")
                self.status_var.set(
                    f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filled_count:,} ‡∏Ñ‡πà‡∏≤")
                messagebox.showinfo(
                    "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á {filled_count:,} ‡∏Ñ‡πà‡∏≤")
            else:
                messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ:\n{str(e)}")

    def remove_empty_rows(self):
        """‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return

        try:
            self.save_to_undo_stack()
            original_count = len(self.data)
            self.data = self.data.dropna(how='all')
            removed_count = original_count - len(self.data)

            self.update_display()
            self.update_info_panel()

            if removed_count > 0:
                self.cleaning_history.append(
                    f"‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á: {removed_count:,} ‡πÅ‡∏ñ‡∏ß")
                self.status_var.set(
                    f"‚úÖ ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {removed_count:,} ‡πÅ‡∏ñ‡∏ß")
                messagebox.showinfo(
                    "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á {removed_count:,} ‡πÅ‡∏ñ‡∏ß")
            else:
                messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ:\n{str(e)}")

    def compare_data(self):
        """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"""
        if self.data is None or self.original_data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
            return

        compare_window = tk.Toplevel(self.root)
        compare_window.title("üìã ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        compare_window.geometry("800x600")

        notebook = ttk.Notebook(compare_window)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏£‡∏∏‡∏õ
        summary_frame = ttk.Frame(notebook)
        notebook.add(summary_frame, text="üìä ‡∏™‡∏£‡∏∏‡∏õ")

        summary_text = tk.Text(
            summary_frame, wrap=tk.WORD, font=("Consolas", 10))
        summary_scrollbar = ttk.Scrollbar(
            summary_frame, orient="vertical", command=summary_text.yview)
        summary_text.configure(yscrollcommand=summary_scrollbar.set)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        comparison = self.generate_comparison_report()
        summary_text.insert('1.0', comparison)
        summary_text.config(state='disabled')

        summary_text.pack(side='left', fill='both', expand=True)
        summary_scrollbar.pack(side='right', fill='y')

    def generate_comparison_report(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"""
        original = self.original_data
        current = self.data

        # Check if data exists
        if original is None or current is None:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"

        report = "üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
        report += "=" * 50 + "\n\n"

        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        report += "üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:\n"
        report += f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(original):,} ‚Üí {len(current):,} ({len(current) - len(original):+,})\n"
        report += f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(original.columns):,} ‚Üí {len(current.columns):,}\n"

        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        original_missing = original.isnull().sum().sum()
        current_missing = current.isnull().sum().sum()
        report += f"‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {original_missing:,} ‚Üí {current_missing:,} ({current_missing - original_missing:+,})\n"

        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        original_duplicates = original.duplicated().sum()
        current_duplicates = current.duplicated().sum()
        report += f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: {original_duplicates:,} ‚Üí {current_duplicates:,} ({current_duplicates - original_duplicates:+,})\n\n"

        # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        if self.cleaning_history:
            report += "üìù ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:\n"
            for i, action in enumerate(self.cleaning_history, 1):
                report += f"{i}. {action}\n"
        else:
            report += "üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î\n"

        return report

    def export_report(self):
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
            return

        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

            report_data = {
                '‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': {
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß': len(self.data),
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå': len(self.data.columns),
                    '‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î': self.data.isnull().sum().sum(),
                    '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥': self.data.duplicated().sum(),
                    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            }

            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            column_stats = {}
            for col in self.data.columns:
                stats = {
                    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': str(self.data[col].dtype),
                    '‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á': self.data[col].count(),
                    '‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á': self.data[col].isnull().sum(),
                    '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á': round(self.data[col].isnull().sum() / len(self.data) * 100, 2)
                }

                if self.data[col].dtype in ['int64', 'float64']:
                    stats.update({
                        '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': round(self.data[col].mean(), 2) if pd.notna(self.data[col].mean()) else None,
                        '‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î': self.data[col].max(),
                        '‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î': self.data[col].min(),
                        '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô': round(self.data[col].std(), 2) if pd.notna(self.data[col].std()) else None
                    })
                else:
                    stats.update({
                        '‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥': self.data[col].nunique()
                    })

                column_stats[col] = stats

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            file_path = filedialog.asksaveasfilename(
                title="‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
                defaultextension=".xlsx",
                filetypes=[
                    ("Excel files", "*.xlsx"),
                    ("CSV files", "*.csv")],
                initialfile=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•_{timestamp}"
            )

            if file_path:
                if file_path.endswith('.xlsx'):
                    # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel
                    with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
                        self.data.to_excel(
                            writer, sheet_name='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å', index=False)

                        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        summary_df = pd.DataFrame(
                            [report_data['‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']]).T
                        summary_df.columns = ['‡∏Ñ‡πà‡∏≤']
                        summary_df.to_excel(writer, sheet_name='‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')

                        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                        stats_df = pd.DataFrame(column_stats).T
                        stats_df.to_excel(writer, sheet_name='‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå')

                        # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
                        if self.cleaning_history:
                            history_df = pd.DataFrame(
                                self.cleaning_history, columns=['‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥'])
                            history_df.to_excel(
                                writer, sheet_name='‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', index=False)
                else:
                    # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV
                    self.data.to_csv(file_path, index=False,
                                     encoding='utf-8-sig')

                filename = os.path.basename(file_path)
                self.status_var.set(f"‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
                messagebox.showinfo(
                    "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡πÑ‡∏ü‡∏•‡πå: {filename}")

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:\n{str(e)}")

    def validate_data(self):
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            return

        validate_window = tk.Toplevel(self.root)
        validate_window.title("üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        validate_window.geometry("700x500")

        text_frame = ttk.Frame(validate_window)
        text_frame.pack(fill='both', expand=True, padx=10, pady=10)

        text_widget = tk.Text(text_frame, wrap=tk.WORD, font=("Consolas", 10))
        scrollbar = ttk.Scrollbar(
            text_frame, orient="vertical", command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        quality_score = 100
        issues = []

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        missing_pct = (self.data.isnull().sum().sum() /
                       (len(self.data) * len(self.data.columns))) * 100
        if missing_pct > 10:
            quality_score -= 20
            issues.append(f"‚ùå ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({missing_pct:.1f}%)")
        elif missing_pct > 5:
            quality_score -= 10
            issues.append(f"‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ({missing_pct:.1f}%)")
        else:
            issues.append(f"‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ ({missing_pct:.1f}%)")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        dup_pct = (self.data.duplicated().sum() / len(self.data)) * 100
        if dup_pct > 5:
            quality_score -= 15
            issues.append(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({dup_pct:.1f}%)")
        elif dup_pct > 0:
            quality_score -= 5
            issues.append(f"‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ({dup_pct:.1f}%)")
        else:
            issues.append("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        type_issues = 0
        for col in self.data.columns:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if self.data[col].dtype == 'object':
                try:
                    pd.to_numeric(self.data[col], errors='raise')
                    type_issues += 1
                    issues.append(f"‚ö†Ô∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col}' ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                except (ValueError, TypeError, AttributeError):
                    pass

        if type_issues > 0:
            quality_score -= (type_issues * 5)

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏£‡∏î
        if quality_score >= 90:
            grade = "A"
            grade_color = "üü¢"
        elif quality_score >= 80:
            grade = "B"
            grade_color = "üü°"
        elif quality_score >= 70:
            grade = "C"
            grade_color = "üü†"
        else:
            grade = "D"
            grade_color = "üî¥"

        report = f"""üéØ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
{'='*50}

{grade_color} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {quality_score}/100 (‡πÄ‡∏Å‡∏£‡∏î {grade})

üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(self.data):,}
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(self.data.columns):,}
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {self.data.isnull().sum().sum():,} ({missing_pct:.1f}%)
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: {self.data.duplicated().sum():,} ({dup_pct:.1f}%)

üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:
"""

        for i, issue in enumerate(issues, 1):
            report += f"{i}. {issue}\n"

        if quality_score < 90:
            report += "\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n"
            if missing_pct > 5:
                report += "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô '‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á'\n"
            if dup_pct > 0:
                report += "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥'\n"
            if type_issues > 0:
                report += "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        else:
            report += "\nüéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏°‡∏≤‡∏Å\n"

        text_widget.insert(tk.END, report)
        text_widget.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        ttk.Button(validate_window, text="‡∏õ‡∏¥‡∏î",
                   command=validate_window.destroy).pack(pady=10)

    def reset_data(self):
        if self.original_data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï")
            return

        result = messagebox.askyesno(
            "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
        if result:
            self.data = self.original_data.copy()
            self.cleaning_history = []
            self.update_display()
            self.update_info_panel()
            self.status_var.set("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    def show_stats(self):
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
            return

        try:
            stats_window = tk.Toplevel(self.root)
            stats_window.title("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            stats_window.geometry("700x600")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Text widget ‡∏û‡∏£‡πâ‡∏≠‡∏° Scrollbar
            text_frame = ttk.Frame(stats_window)
            text_frame.pack(fill='both', expand=True, padx=10, pady=10)

            text_widget = tk.Text(
                text_frame, wrap=tk.WORD, font=("Consolas", 10))
            scrollbar = ttk.Scrollbar(
                text_frame, orient="vertical", command=text_widget.yview)
            text_widget.configure(
                yscrollcommand=scrollbar.set)            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            memory_mb = self.data.memory_usage(deep=True).sum() / 1024 / 1024
            stats_info = f"""üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
{'='*60}
üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(self.data):,}
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(self.data.columns):,}
‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {memory_mb:.2f} MB
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {self.data.isnull().sum().sum():,}
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: {self.data.duplicated().sum():,}

üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:
{'='*60}
"""

            for col in self.data.columns:
                stats_info += f"\nüîπ {col}\n"
                stats_info += f"   ‚îú‚îÄ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {self.data[col].dtype}\n"
                stats_info += f"   ‚îú‚îÄ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á: {self.data[col].count():,}\n"
                stats_info += f"   ‚îú‚îÄ ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á: {self.data[col].isnull().sum():,}\n"
                stats_info += f"   ‚îî‚îÄ ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á: {(self.data[col].isnull().sum() / len(self.data) * 100):.1f}%\n"

                if self.data[col].dtype in ['int64', 'float64']:
                    stats_info += "   üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:\n"
                    stats_info += f"      ‚îú‚îÄ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {self.data[col].mean():.2f}\n"
                    stats_info += f"      ‚îú‚îÄ ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á: {self.data[col].median():.2f}\n"
                    stats_info += f"      ‚îú‚îÄ ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {self.data[col].max()}\n"
                    stats_info += f"      ‚îú‚îÄ ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {self.data[col].min()}\n"
                    stats_info += f"      ‚îî‚îÄ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô: {self.data[col].std():.2f}\n"
                else:
                    unique_count = self.data[col].nunique()
                    stats_info += "   üìù ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:\n"
                    stats_info += f"      ‚îú‚îÄ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥: {unique_count:,}\n"

                    if unique_count <= 10 and unique_count > 0:
                        top_values = self.data[col].value_counts().head(5)
                        stats_info += "      ‚îî‚îÄ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢:\n"
                        for val, count in top_values.items():
                            percentage = (count / len(self.data)) * 100
                            stats_info += f"         ‚Ä¢ {val}: {count:,} ({percentage:.1f}%)\n"

            text_widget.insert(tk.END, stats_info)
            text_widget.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")

            # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
            ttk.Button(stats_window, text="‡∏õ‡∏¥‡∏î",
                       command=stats_window.destroy).pack(pady=5)

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ:\n{str(e)}")

    def update_display(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        if self.data is None or self.tree is None:
            return

        try:
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
            for item in self.tree.get_children():
                self.tree.delete(item)

            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            columns = list(self.data.columns)
            self.tree["columns"] = columns
            self.tree["show"] = "headings"

            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ heading ‡πÅ‡∏•‡∏∞ width
            for col in columns:
                self.tree.heading(col, text=col)
                if col.lower() in ['id', 'no', 'index']:
                    self.tree.column(
                        col, width=60, minwidth=60, anchor='center')
                else:
                    self.tree.column(col, width=120, minwidth=80)

            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            max_rows = self.settings.get('max_display_rows', 1000)
            display_data = self.data.head(max_rows)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            for index, row in display_data.iterrows():
                values = [str(val) if pd.notna(val) else '' for val in row]
                self.tree.insert("", "end", values=values)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            if len(self.data) > max_rows:
                notice_values = ['‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á {} ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å'.format(
                    max_rows)] + [''] * (len(self.data.columns) - 1)
                self.tree.insert("", "end", values=notice_values)

        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: {e}")

    def create_menu(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ö‡∏≤‡∏£‡πå"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        # ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏ü‡∏•‡πå
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üìÅ ‡πÑ‡∏ü‡∏•‡πå", menu=file_menu)
        file_menu.add_command(label="üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå",
                              command=self.open_file, accelerator="Ctrl+O")
        file_menu.add_command(
            label="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", command=self.save_file, accelerator="Ctrl+S")
        file_menu.add_command(label="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô...",
                              command=self.save_as_file)
        file_menu.add_separator()
        file_menu.add_command(label="üìä ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
                              command=self.load_sample_data)
        file_menu.add_separator()
        file_menu.add_command(
            label="‚ùå ‡∏≠‡∏≠‡∏Å", command=self.root.quit, accelerator="Ctrl+Q")

        # ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        edit_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", menu=edit_menu)
        edit_menu.add_command(
            label="üîÑ ‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏≥", command=self.undo_action, accelerator="Ctrl+Z")
        edit_menu.add_command(
            label="üîÑ ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥", command=self.redo_action, accelerator="Ctrl+Y")
        edit_menu.add_separator()
        edit_menu.add_command(label="üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", command=self.reset_data)

        # ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üõ†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", menu=tools_menu)

        # ‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        clean_submenu = tk.Menu(tools_menu, tearoff=0)
        tools_menu.add_cascade(label="üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î", menu=clean_submenu)
        clean_submenu.add_command(
            label="üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", command=self.clean_all)
        clean_submenu.add_command(
            label="üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥", command=self.remove_duplicates)
        clean_submenu.add_command(
            label="üîß ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á", command=self.fill_missing)
        clean_submenu.add_command(
            label="üßº ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á", command=self.remove_empty_rows)
        clean_submenu.add_command(
            label="üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", command=self.detect_outliers)
        clean_submenu.add_command(
            label="üìè ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", command=self.standardize_data)

        tools_menu.add_separator()
        tools_menu.add_command(label="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", command=self.show_stats)
        tools_menu.add_command(label="üìã ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                               command=self.compare_data)
        tools_menu.add_command(label="üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
                               command=self.validate_data)
        tools_menu.add_command(label="üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
                               command=self.export_report)

        # ‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", menu=settings_menu)
        settings_menu.add_command(
            label="üéõÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", command=self.open_settings)
        settings_menu.add_command(
            label="üßπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î", command=self.open_cleaning_settings)
        settings_menu.add_command(
            label="üìä ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", command=self.open_display_settings)
        settings_menu.add_command(
            label="üéÆ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", command=self.select_working_mode)
        settings_menu.add_separator()
        settings_menu.add_command(
            label="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", command=self.save_settings)
        settings_menu.add_command(
            label="üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", command=self.reset_settings)

        # ‡πÄ‡∏°‡∏ô‡∏π‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", menu=help_menu)
        help_menu.add_command(label="üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                              command=self.show_help)
        help_menu.add_command(label="üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö", command=self.show_tips)
        help_menu.add_command(label="üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                              command=self.show_examples)
        help_menu.add_separator()
        help_menu.add_command(label="‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
                              command=self.show_about)

        # ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ä‡∏≠‡∏£‡πå‡∏ï‡∏Ñ‡∏±‡∏ï
        self.root.bind('<Control-o>', lambda e: self.open_file())
        self.root.bind('<Control-s>', lambda e: self.save_file())
        self.root.bind('<Control-z>', lambda e: self.undo_action())
        self.root.bind('<Control-y>', lambda e: self.redo_action())
        self.root.bind('<Control-q>', lambda e: self.root.quit())

    def load_settings(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if os.path.exists('settings.json'):
                with open('settings.json', 'r', encoding='utf-8') as f:
                    saved_settings = json.load(f)
                    self.settings.update(saved_settings)
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ: {e}")

    def save_settings(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            with open('settings.json', 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ: {e}")

    def reset_settings(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        if messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
            self.settings = {
                'auto_clean': False,
                'fill_method': 'mean',
                'duplicate_method': 'first',
                'outlier_method': 'zscore',
                'outlier_threshold': 3.0,
                'date_format': '%Y-%m-%d',
                'encoding': 'utf-8-sig',
                'decimal_places': 2,
                'show_preview': True,
                'backup_original': True,
                'working_mode': 'standard'
            }
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    def open_settings(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
        settings_window.geometry("500x400")
        settings_window.resizable(False, False)

        # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
        settings_window.transient(self.root)
        settings_window.grab_set()

        notebook = ttk.Notebook(settings_window)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        general_frame = ttk.Frame(notebook)
        notebook.add(general_frame, text="‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")

        # ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        ttk.Label(general_frame, text="üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(10, 5))
        backup_var = tk.BooleanVar(value=self.settings['backup_original'])
        ttk.Checkbutton(general_frame, text="‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                        variable=backup_var).pack(anchor='w', padx=20)

        # ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        ttk.Label(general_frame, text="üëÄ ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 5))
        preview_var = tk.BooleanVar(value=self.settings['show_preview'])
        ttk.Checkbutton(general_frame, text="‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                        variable=preview_var).pack(anchor='w', padx=20)

        # ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        ttk.Label(general_frame, text="üìù ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 5))
        encoding_var = tk.StringVar(value=self.settings['encoding'])
        encoding_frame = ttk.Frame(general_frame)
        encoding_frame.pack(anchor='w', padx=20)
        ttk.Label(encoding_frame, text="Encoding:").pack(side='left')
        encoding_combo = ttk.Combobox(encoding_frame, textvariable=encoding_var,
                                      values=['utf-8-sig', 'utf-8',
                                              'cp874', 'iso-8859-1'],
                                      width=15, state='readonly')
        encoding_combo.pack(side='left', padx=(10, 0))

        # ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
        ttk.Label(general_frame, text="üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 5))
        decimal_var = tk.IntVar(value=self.settings['decimal_places'])
        decimal_frame = ttk.Frame(general_frame)
        decimal_frame.pack(anchor='w', padx=20)
        ttk.Label(decimal_frame, text="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°:").pack(side='left')
        ttk.Spinbox(decimal_frame, from_=0, to=10, textvariable=decimal_var,
                    width=10).pack(side='left', padx=(10, 0))

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        button_frame = ttk.Frame(general_frame)
        button_frame.pack(fill='x', pady=(30, 10))

        def save_general_settings():
            self.settings['backup_original'] = backup_var.get()
            self.settings['show_preview'] = preview_var.get()
            self.settings['encoding'] = encoding_var.get()
            self.settings['decimal_places'] = decimal_var.get()
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            settings_window.destroy()

        ttk.Button(button_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                   command=save_general_settings).pack(side='right', padx=5)
        ttk.Button(button_frame, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                   command=settings_window.destroy).pack(side='right')

    def open_cleaning_settings(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"""
        cleaning_window = tk.Toplevel(self.root)
        cleaning_window.title("üßπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
        cleaning_window.geometry("600x500")
        cleaning_window.resizable(False, False)
        cleaning_window.transient(self.root)
        cleaning_window.grab_set()

        notebook = ttk.Notebook(cleaning_window)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        fill_frame = ttk.Frame(notebook)
        notebook.add(fill_frame, text="‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")

        ttk.Label(fill_frame, text="üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(10, 5))
        fill_var = tk.StringVar(value=self.settings['fill_method'])

        fill_options = [
            ('mean', '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)'),
            ('median', '‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)'),
            ('mode', '‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î'),
            ('zero', '‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ 0'),
            ('remove', '‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á')
        ]

        for value, text in fill_options:
            ttk.Radiobutton(fill_frame, text=text, variable=fill_var, value=value).pack(
                anchor='w', padx=20, pady=2)

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        dup_frame = ttk.Frame(notebook)
        notebook.add(dup_frame, text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥")

        ttk.Label(dup_frame, text="üóëÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(10, 5))
        dup_var = tk.StringVar(value=self.settings['duplicate_method'])

        dup_options = [
            ('first', '‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠'),
            ('last', '‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤'),
            ('all', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
        ]

        for value, text in dup_options:
            ttk.Radiobutton(dup_frame, text=text, variable=dup_var, value=value).pack(
                anchor='w', padx=20, pady=2)

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        outlier_frame = ttk.Frame(notebook)
        notebook.add(outlier_frame, text="‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")

        ttk.Label(outlier_frame, text="üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
                  font=("Arial", 12, "bold")).pack(anchor='w', pady=(10, 5))
        outlier_var = tk.StringVar(value=self.settings['outlier_method'])

        outlier_options = [
            ('zscore', 'Z-Score (‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢)'),
            ('iqr', 'IQR (Inter Quartile Range)'),
            ('none', '‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        ]

        for value, text in outlier_options:
            ttk.Radiobutton(outlier_frame, text=text, variable=outlier_var, value=value).pack(
                anchor='w', padx=20, pady=2)

        # ‡∏Ñ‡πà‡∏≤ threshold
        ttk.Label(outlier_frame, text="üìè ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß (Threshold)", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 5))
        threshold_var = tk.DoubleVar(value=self.settings['outlier_threshold'])
        threshold_frame = ttk.Frame(outlier_frame)
        threshold_frame.pack(anchor='w', padx=20)
        ttk.Label(threshold_frame, text="‡∏Ñ‡πà‡∏≤ Threshold:").pack(side='left')
        ttk.Spinbox(threshold_frame, from_=1.0, to=5.0, increment=0.1,
                    textvariable=threshold_var, width=10).pack(side='left', padx=(10, 0))

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        button_frame = ttk.Frame(cleaning_window)
        button_frame.pack(fill='x', padx=10, pady=10)

        def save_cleaning_settings():
            self.settings['fill_method'] = fill_var.get()
            self.settings['duplicate_method'] = dup_var.get()
            self.settings['outlier_method'] = outlier_var.get()
            self.settings['outlier_threshold'] = threshold_var.get()
            messagebox.showinfo(
                "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            cleaning_window.destroy()

        ttk.Button(button_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                   command=save_cleaning_settings).pack(side='right', padx=5)
        ttk.Button(button_frame, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                   command=cleaning_window.destroy).pack(side='right')

    def select_working_mode(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        mode_window = tk.Toplevel(self.root)
        mode_window.title("üéÆ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        mode_window.geometry("500x400")
        mode_window.resizable(False, False)
        mode_window.transient(self.root)
        mode_window.grab_set()

        ttk.Label(mode_window, text="üéÆ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
                  font=("Arial", 16, "bold")).pack(pady=20)

        mode_var = tk.StringVar(value=self.settings['working_mode'])

        # ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        beginner_frame = ttk.LabelFrame(
            mode_window, text="üå± ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", padding=10)
        beginner_frame.pack(fill='x', padx=20, pady=10)
        ttk.Radiobutton(beginner_frame, text="‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
                        variable=mode_var, value='beginner').pack(anchor='w')

        # ‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        standard_frame = ttk.LabelFrame(
            mode_window, text="‚öôÔ∏è ‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", padding=10)
        standard_frame.pack(fill='x', padx=20, pady=10)
        ttk.Radiobutton(standard_frame, text="‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
                        variable=mode_var, value='standard').pack(anchor='w')

        # ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
        expert_frame = ttk.LabelFrame(
            mode_window, text="üöÄ ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç", padding=10)
        expert_frame.pack(fill='x', padx=20, pady=10)
        ttk.Radiobutton(expert_frame, text="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç",
                        variable=mode_var, value='expert').pack(anchor='w')

        def apply_mode():
            self.settings['working_mode'] = mode_var.get()
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î: {mode_var.get()}")
            mode_window.destroy()

        button_frame = ttk.Frame(mode_window)
        button_frame.pack(fill='x', padx=20, pady=20)
        ttk.Button(button_frame, text="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                   command=apply_mode).pack(side='right', padx=5)
        ttk.Button(button_frame, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                   command=mode_window.destroy).pack(side='right')

    def open_display_settings(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        display_window = tk.Toplevel(self.root)
        display_window.title("üìä ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
        display_window.geometry("450x350")
        display_window.resizable(False, False)
        display_window.transient(self.root)
        display_window.grab_set()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        ttk.Label(display_window, text="üìÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á", font=(
            "Arial", 12, "bold")).pack(anchor='w', padx=20, pady=(20, 5))
        rows_var = tk.IntVar(value=1000)
        rows_frame = ttk.Frame(display_window)
        rows_frame.pack(anchor='w', padx=20)
        ttk.Label(rows_frame, text="‡πÅ‡∏ñ‡∏ß:").pack(side='left')
        ttk.Spinbox(rows_frame, from_=100, to=10000, increment=100,
                    textvariable=rows_var, width=10).pack(side='left', padx=(10, 0))

        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        ttk.Label(display_window, text="üî¢ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", font=(
            "Arial", 12, "bold")).pack(anchor='w', padx=20, pady=(20, 5))
        number_format_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(display_window, text="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (1,000)",
                        variable=number_format_var).pack(anchor='w', padx=30)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        ttk.Label(display_window, text="üìà ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", font=(
            "Arial", 12, "bold")).pack(anchor='w', padx=20, pady=(20, 5))
        auto_stats_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(display_window, text="‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                        variable=auto_stats_var).pack(anchor='w', padx=30)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        button_frame = ttk.Frame(display_window)
        button_frame.pack(fill='x', padx=20, pady=30)

        def save_display_settings():
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            display_window.destroy()

        ttk.Button(button_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                   command=save_display_settings).pack(side='right', padx=5)
        ttk.Button(button_frame, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                   command=display_window.destroy).pack(side='right')

    def load_sample_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            sample_data = {
                '‡∏•‡∏≥‡∏î‡∏±‡∏ö': range(1, 101),
                '‡∏ä‡∏∑‡πà‡∏≠': [f'‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {i}' for i in range(1, 101)],
                '‡∏≠‡∏≤‡∏¢‡∏∏': np.random.randint(18, 65, 100),
                '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': np.random.randint(15000, 100000, 100),
                '‡πÅ‡∏ú‡∏ô‡∏Å': np.random.choice(['IT', 'HR', 'Finance', 'Marketing'], 100),
                '‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô': pd.date_range('2020-01-01', periods=100, freq='D')
            }

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            sample_df = pd.DataFrame(sample_data)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
            sample_df.loc[10:15, '‡∏≠‡∏≤‡∏¢‡∏∏'] = np.nan
            sample_df.loc[20:25, '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = np.nan

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
            sample_df = pd.concat(
                [sample_df, sample_df.iloc[0:5]], ignore_index=True)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            sample_df.loc[50, '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = 1000000  # outlier
            # outlier            self.data = sample_df
            sample_df.loc[51, '‡∏≠‡∏≤‡∏¢‡∏∏'] = 150
            if self.data is not None:
                self.original_data = self.data.copy()
                self.cleaning_history = []

                self.update_display()
                self.update_info_panel()
                self.status_var.set("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ:\n{str(e)}")

    def save_as_file(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            return

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_path = filedialog.asksaveasfilename(
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô",
            initialdir=os.getcwd(),
            initialfile=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∞‡∏≠‡∏≤‡∏î_{timestamp}",
            defaultextension=".xlsx",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("CSV files", "*.csv"),
                ("All files", "*.*")
            ]
        )

        if file_path:
            try:
                if file_path.endswith('.csv'):
                    self.data.to_csv(file_path, index=False,
                                     encoding='utf-8-sig')
                else:
                    self.data.to_excel(file_path, index=False)

                filename = os.path.basename(file_path)
                self.status_var.set(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")

            except Exception as e:
                messagebox.showerror(
                    "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:\n{str(e)}")

    def undo_action(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        if not self.undo_stack:
            messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            return

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á redo stack
        if self.data is not None:
            self.redo_stack.append(self.data.copy())

        # ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        self.data = self.undo_stack.pop()
        self.update_display()
        self.update_info_panel()
        self.status_var.set("‚Ü∂ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

    def redo_action(self):
        """‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ"""
        if not self.redo_stack:
            messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏ã‡πâ‡∏≥")
            return

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á undo stack
        if self.data is not None:
            self.undo_stack.append(self.data.copy())

        # ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ
        self.data = self.redo_stack.pop()
        self.update_display()
        self.update_info_panel()
        self.status_var.set("‚Ü∑ ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥")

    def detect_outliers(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return

        try:
            # ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            outlier_window = tk.Toplevel(self.root)
            outlier_window.title("üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
            outlier_window.geometry("500x400")

            # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£
            method_frame = ttk.LabelFrame(
                outlier_window, text="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")
            method_frame.pack(fill='x', padx=10, pady=10)

            method_var = tk.StringVar(
                value=self.settings.get('outlier_method', 'zscore'))
            ttk.Radiobutton(method_frame, text="Z-Score",
                            variable=method_var, value='zscore').pack(anchor='w')
            ttk.Radiobutton(method_frame, text="IQR",
                            variable=method_var, value='iqr').pack(anchor='w')

            # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå
            threshold_frame = ttk.Frame(method_frame)
            threshold_frame.pack(fill='x', pady=5)
            ttk.Label(threshold_frame, text="‡πÄ‡∏Å‡∏ì‡∏ë‡πå:").pack(side='left')
            threshold_var = tk.DoubleVar(
                value=self.settings.get('outlier_threshold', 3.0))
            ttk.Spinbox(threshold_frame, from_=1.0, to=5.0, increment=0.1,
                        textvariable=threshold_var, width=10).pack(side='left', padx=5)

            # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£            action_frame = ttk.LabelFrame(outlier_window, text="‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")
            action_frame.pack(fill='x', padx=10, pady=10)

            action_var = tk.StringVar(value='remove')
            ttk.Radiobutton(action_frame, text="‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
                            variable=action_var, value='remove').pack(anchor='w')
            ttk.Radiobutton(action_frame, text="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                            variable=action_var, value='show').pack(anchor='w')

            def apply_outlier_detection():
                try:
                    if self.data is None:
                        messagebox.showwarning(
                            "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
                        return

                    outliers_found = 0
                    outlier_details = []

                    # Get numeric columns safely
                    try:
                        numeric_columns = self.data.select_dtypes(
                            include=[np.number]).columns
                    except (AttributeError, TypeError):
                        messagebox.showerror(
                            "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ")
                        return

                    for col in numeric_columns:
                        try:
                            if method_var.get() == 'zscore':
                                col_data = self.data[col]
                                if col_data is None or col_data.empty:
                                    continue

                                mean_val = col_data.mean()
                                std_val = col_data.std()

                                if pd.isna(mean_val) or pd.isna(std_val) or std_val == 0:
                                    continue

                                z_scores = np.abs(
                                    (col_data - mean_val) / std_val)
                                outliers = z_scores > threshold_var.get()
                            # IQR                                col_data = self.data[col]
                            else:
                                if col_data is None or col_data.empty:
                                    continue

                                q1 = col_data.quantile(0.25)
                                q3 = col_data.quantile(0.75)

                                if pd.isna(q1) or pd.isna(q3):
                                    continue

                                iqr = q3 - q1
                                lower_bound = q1 - 1.5 * iqr
                                upper_bound = q3 + 1.5 * iqr
                                outliers = (col_data < lower_bound) | (
                                    col_data > upper_bound)
                        except Exception as col_error:
                            print(
                                f"Error processing column {col}: {str(col_error)}")
                            continue

                        try:
                            outlier_count = outliers.sum()
                            if outlier_count > 0:
                                outliers_found += outlier_count
                                outlier_details.append(
                                    f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col}: {outlier_count} ‡∏Ñ‡πà‡∏≤")
                        except Exception as count_error:
                            print(
                                f"Error counting outliers for column {col}: {str(count_error)}")
                            continue

                    if outliers_found > 0:
                        if action_var.get() == 'remove':
                            self.save_to_undo_stack()
                            # ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ)
                            result_text = f"‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ {outliers_found} ‡∏Ñ‡πà‡∏≤:\n" + "\n".join(
                                outlier_details)
                        else:
                            result_text = f"‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ {outliers_found} ‡∏Ñ‡πà‡∏≤:\n" + "\n".join(
                                outlier_details)

                        messagebox.showinfo("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", result_text)
                    else:
                        messagebox.showinfo("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")

                    outlier_window.destroy()

                except Exception as e:
                    messagebox.showerror(
                        "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n{str(e)}")

            # ‡∏õ‡∏∏‡πà‡∏°
            button_frame = ttk.Frame(outlier_window)
            button_frame.pack(fill='x', padx=10, pady=10)
            ttk.Button(button_frame, text="‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                       command=apply_outlier_detection).pack(side='left', padx=5)
            ttk.Button(button_frame, text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", command=outlier_window.destroy).pack(
                side='right', padx=5)

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏î‡πâ:\n{str(e)}")

    def standardize_data(self):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            return

        try:
            self.save_to_undo_stack()
            changes = []

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            for col in self.data.select_dtypes(include=['object']).columns:
                if self.settings.get('standardize_text', True):
                    # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                    if self.settings.get('remove_whitespace', True):
                        self.data[col] = self.data[col].astype(str).str.strip()
                        changes.append(f"‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col}")

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            decimal_places = self.settings.get('decimal_places', 2)
            for col in self.data.select_dtypes(include=['float64']).columns:
                self.data[col] = self.data[col].round(decimal_places)
                changes.append(
                    f"‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col} ‡πÄ‡∏õ‡πá‡∏ô {decimal_places} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")

            self.update_display()
            self.update_info_panel()

            if changes:
                self.cleaning_history.extend(changes)
                result_text = "‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n" + \
                    "\n".join(f"‚Ä¢ {change}" for change in changes)
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", result_text)
                self.status_var.set("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            else:
                messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ:\n{str(e)}")

    def open_advanced_cleaning_options(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return

        options_window = tk.Toplevel(self.root)
        options_window.title("üõ†Ô∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á")
        options_window.geometry("800x700")
        options_window.resizable(True, True)

        # Notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        notebook = ttk.Notebook(options_window)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡πÅ‡∏ó‡πá‡∏ö 1: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        missing_frame = ttk.Frame(notebook)
        notebook.add(missing_frame, text="üîß ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
        self.create_missing_data_options(missing_frame)

        # ‡πÅ‡∏ó‡πá‡∏ö 2: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        duplicate_frame = ttk.Frame(notebook)
        notebook.add(duplicate_frame, text="üóëÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥")
        self.create_duplicate_options(duplicate_frame)

        # ‡πÅ‡∏ó‡πá‡∏ö 3: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        outlier_frame = ttk.Frame(notebook)
        notebook.add(outlier_frame, text="üéØ ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
        self.create_outlier_options(outlier_frame)

        # ‡πÅ‡∏ó‡πá‡∏ö 4: ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        standardize_frame = ttk.Frame(notebook)
        notebook.add(standardize_frame, text="üìè ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")
        self.create_standardization_options(standardize_frame)

        # ‡πÅ‡∏ó‡πá‡∏ö 5: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        column_frame = ttk.Frame(notebook)
        notebook.add(column_frame, text="üìä ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        self.create_column_specific_options(column_frame)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        button_frame = ttk.Frame(options_window)
        button_frame.pack(fill='x', padx=10, pady=10)

        ttk.Button(button_frame, text="üîç ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
                   command=lambda: self.preview_cleaning_changes()).pack(side='left', padx=5)
        ttk.Button(button_frame, text="‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                   command=lambda: self.apply_advanced_cleaning(options_window)).pack(side='left', padx=5)
        ttk.Button(button_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
                   command=self.save_cleaning_template).pack(side='left', padx=5)
        ttk.Button(button_frame, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                   command=options_window.destroy).pack(side='right', padx=5)

    def create_missing_data_options(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á"""        # Create main frame with scrollable functionality
        canvas = tk.Canvas(parent)
        scrollbar = ttk.Scrollbar(
            parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        main_frame = scrollable_frame
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        ttk.Label(main_frame, text="üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(0, 10))

        self.fill_method_var = tk.StringVar(
            value=self.settings.get('fill_method', 'mean'))
        methods = [
            ('mean', '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)'),
            ('median', '‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)'),
            ('mode', '‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î'),
            ('zero', '‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ 0'),
            ('forward', '‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤'),
            ('backward', '‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'),
            ('interpolate', '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤'),
            ('custom', '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á'),
            ('remove', '‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á')
        ]

        for value, text in methods:
            ttk.Radiobutton(main_frame, text=text, variable=self.fill_method_var,
                            value=value).pack(anchor='w', padx=20)

        # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
        custom_frame = ttk.LabelFrame(
            main_frame, text="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        custom_frame.pack(fill='x', pady=(20, 0))

        self.custom_values = {}
        if self.data is not None:
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á 10 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
            for i, col in enumerate(self.data.columns[:10]):
                row_frame = ttk.Frame(custom_frame)
                row_frame.pack(fill='x', padx=5, pady=2)

                ttk.Label(row_frame, text=f"{col}:",
                          width=20).pack(side='left')
                entry = ttk.Entry(row_frame, width=30)
                entry.pack(side='left', padx=(10, 0))
                self.custom_values[col] = entry

    def create_duplicate_options(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥"""
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        ttk.Label(main_frame, text="üóëÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(0, 10))

        self.duplicate_method_var = tk.StringVar(
            value=self.settings.get('duplicate_method', 'first'))
        dup_methods = [
            ('first', '‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠'),
            ('last', '‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤'),
            ('all', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö)'),
            ('mark_only', '‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏•‡∏ö')
        ]

        for value, text in dup_methods:
            ttk.Radiobutton(main_frame, text=text, variable=self.duplicate_method_var,
                            value=value).pack(anchor='w', padx=20)

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        ttk.Label(main_frame, text="üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 10))

        self.duplicate_columns = {}
        if self.data is not None:
            columns_frame = ttk.Frame(main_frame)
            columns_frame.pack(fill='x')

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Checkbutton ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            for i, col in enumerate(self.data.columns):
                var = tk.BooleanVar(value=True)
                ttk.Checkbutton(columns_frame, text=col, variable=var).grid(
                    row=i//3, column=i % 3, sticky='w', padx=5, pady=2)
                self.duplicate_columns[col] = var

    def create_outlier_options(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"""
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        ttk.Label(main_frame, text="üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(0, 10))

        self.outlier_method_var = tk.StringVar(
            value=self.settings.get('outlier_method', 'zscore'))
        outlier_methods = [
            ('zscore', 'Z-Score (‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô)'),
            ('iqr', 'IQR (Interquartile Range)'),
            ('isolation_forest', 'Isolation Forest (Machine Learning)'),
            ('none', '‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥')
        ]

        for value, text in outlier_methods:
            ttk.Radiobutton(main_frame, text=text, variable=self.outlier_method_var,
                            value=value).pack(anchor='w', padx=20)

        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå
        threshold_frame = ttk.LabelFrame(main_frame, text="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")
        threshold_frame.pack(fill='x', pady=(20, 0))

        # Z-Score threshold
        zscore_frame = ttk.Frame(threshold_frame)
        zscore_frame.pack(fill='x', padx=5, pady=5)
        ttk.Label(zscore_frame, text="Z-Score Threshold:").pack(side='left')
        self.zscore_threshold = tk.DoubleVar(
            value=self.settings.get('outlier_threshold', 3.0))
        ttk.Spinbox(zscore_frame, from_=1.0, to=5.0, increment=0.1,
                    textvariable=self.zscore_threshold, width=10).pack(side='left', padx=(10, 0))

        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        ttk.Label(main_frame, text="üõ†Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 10))

        self.outlier_action_var = tk.StringVar(value='remove')
        outlier_actions = [
            ('remove', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'),
            ('cap', '‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î'),
            ('transform', '‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Log transformation)'),
            ('mark_only', '‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
        ]

        for value, text in outlier_actions:
            ttk.Radiobutton(main_frame, text=text, variable=self.outlier_action_var,
                            value=value).pack(anchor='w', padx=20)

    def create_standardization_options(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        ttk.Label(main_frame, text="üìù ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(0, 10))

        self.text_options = {}
        text_settings = [
            ('remove_whitespace', '‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
            ('standardize_case', '‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô'),
            ('remove_special_chars', '‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©'),
            ('standardize_encoding', '‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô'),
            ('clean_email', '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏µ‡πÄ‡∏°‡∏•'),
            ('clean_phone', '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå'),
            ('clean_url', '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î URL')
        ]

        for key, text in text_settings:
            var = tk.BooleanVar(value=self.settings.get(key, True))
            ttk.Checkbutton(main_frame, text=text, variable=var).pack(
                anchor='w', padx=20)
            self.text_options[key] = var

        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        ttk.Label(main_frame, text="üìÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 10))

        date_frame = ttk.Frame(main_frame)
        date_frame.pack(fill='x', padx=20)

        ttk.Label(date_frame, text="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:").pack(side='left')
        self.date_format_var = tk.StringVar(
            value=self.settings.get('date_format', '%Y-%m-%d'))
        date_formats = ['%Y-%m-%d', '%d/%m/%Y',
                        '%m/%d/%Y', '%Y-%m-%d %H:%M:%S']
        ttk.Combobox(date_frame, textvariable=self.date_format_var, values=date_formats,
                     width=20).pack(side='left', padx=(10, 0))

        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        ttk.Label(main_frame, text="üî¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", font=(
            "Arial", 12, "bold")).pack(anchor='w', pady=(20, 10))

        number_frame = ttk.Frame(main_frame)
        number_frame.pack(fill='x', padx=20)

        ttk.Label(number_frame, text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°:").pack(side='left')
        self.decimal_places_var = tk.IntVar(
            value=self.settings.get('decimal_places', 2))
        ttk.Spinbox(number_frame, from_=0, to=10, textvariable=self.decimal_places_var,
                    width=5).pack(side='left', padx=(10, 0))

    def create_column_specific_options(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå"""
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        if self.data is None:
            ttk.Label(main_frame, text="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á").pack()
            return

        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scroll
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(
            main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        header_frame = ttk.Frame(scrollable_frame)
        header_frame.pack(fill='x', padx=5, pady=5)

        ttk.Label(header_frame, text="‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå", width=15, font=(
            "Arial", 10, "bold")).grid(row=0, column=0, padx=5)
        ttk.Label(header_frame, text="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", width=15, font=(
            "Arial", 10, "bold")).grid(row=0, column=1, padx=5)
        ttk.Label(header_frame, text="‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á", width=15, font=(
            "Arial", 10, "bold")).grid(row=0, column=2, padx=5)
        ttk.Label(header_frame, text="‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", width=15, font=(
            "Arial", 10, "bold")).grid(row=0, column=3, padx=5)
        ttk.Label(header_frame, text="‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", width=15, font=(
            "Arial", 10, "bold")).grid(row=0, column=4, padx=5)

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        self.column_settings = {}
        for i, col in enumerate(self.data.columns):
            row_frame = ttk.Frame(scrollable_frame)
            row_frame.pack(fill='x', padx=5, pady=2)

            # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            ttk.Label(row_frame, text=col[:12] + "..." if len(col) > 12 else col,
                      width=15).grid(row=0, column=0, padx=5, sticky='w')

            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            dtype = str(self.data[col].dtype)
            ttk.Label(row_frame, text=dtype, width=15).grid(
                row=0, column=1, padx=5, sticky='w')

            # ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
            fill_var = tk.StringVar(value='auto')
            fill_combo = ttk.Combobox(row_frame, textvariable=fill_var,
                                      values=['auto', 'mean', 'median',
                                              'mode', 'zero', 'custom', 'remove'],
                                      width=12, state='readonly')
            fill_combo.grid(row=0, column=2, padx=5)

            # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            default_var = tk.StringVar()
            default_entry = ttk.Entry(
                row_frame, textvariable=default_var, width=15)
            default_entry.grid(row=0, column=3, padx=5)

            # ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            validate_var = tk.BooleanVar(value=True)
            ttk.Checkbutton(row_frame, variable=validate_var).grid(
                row=0, column=4, padx=5)

            self.column_settings[col] = {
                'fill_method': fill_var,
                'default_value': default_var,
                'validate': validate_var
            }

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def preview_cleaning_changes(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
            return

        preview_window = tk.Toplevel(self.root)
        preview_window.title("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
        preview_window.geometry("1000x600")

        notebook = ttk.Notebook(preview_window)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
        original_frame = ttk.Frame(notebook)
        notebook.add(original_frame, text="üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°")

        original_tree = ttk.Treeview(original_frame)
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° (10 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
        original_tree.pack(fill='both', expand=True)
        if self.data is not None:
            self.display_data_in_tree(original_tree, self.data.head(10))
        else:
            self.display_data_in_tree(original_tree, pd.DataFrame())

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
        cleaned_frame = ttk.Frame(notebook)
        notebook.add(cleaned_frame, text="‚ú® ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")

        cleaned_tree = ttk.Treeview(cleaned_frame)
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        cleaned_tree.pack(fill='both', expand=True)
        preview_data = self.simulate_cleaning()
        if preview_data is not None:
            self.display_data_in_tree(cleaned_tree, preview_data.head(10))
        else:
            self.display_data_in_tree(cleaned_tree, pd.DataFrame())

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        summary_frame = ttk.Frame(notebook)
        notebook.add(summary_frame, text="üìã ‡∏™‡∏£‡∏∏‡∏õ")

        summary_text = tk.Text(summary_frame, wrap=tk.WORD)
        summary_text.pack(fill='both', expand=True, padx=5, pady=5)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
        summary = self.generate_cleaning_summary(self.data, preview_data)
        summary_text.insert('1.0', summary)
        summary_text.config(state='disabled')

    def simulate_cleaning(self):
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return self.data

        try:
            # ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
            preview_data = self.data.copy()

            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
            fill_method = getattr(self, 'fill_method_var', None)
            if fill_method and fill_method.get() != 'remove':
                for col in preview_data.select_dtypes(include=[np.number]).columns:
                    if fill_method.get() == 'mean':
                        preview_data[col].fillna(
                            preview_data[col].mean(), inplace=True)
                    elif fill_method.get() == 'median':
                        preview_data[col].fillna(
                            preview_data[col].median(), inplace=True)
                    elif fill_method.get() == 'zero':
                        preview_data[col].fillna(0, inplace=True)

            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
            duplicate_method = getattr(self, 'duplicate_method_var', None)
            if duplicate_method and duplicate_method.get() != 'mark_only':
                if duplicate_method.get() == 'first':
                    preview_data = preview_data.drop_duplicates(keep='first')
                elif duplicate_method.get() == 'last':
                    preview_data = preview_data.drop_duplicates(keep='last')
                elif duplicate_method.get() == 'all':
                    preview_data = preview_data.drop_duplicates(keep=False)

            return preview_data

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏î‡πâ: {str(e)}")
            return self.data.copy()

    def generate_cleaning_summary(self, original, cleaned):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"""
        summary = "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á\n"
        summary += "=" * 50 + "\n\n"

        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
        original_rows = len(original)
        cleaned_rows = len(cleaned)
        summary += "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß:\n"
        summary += f"   ‡∏Å‡πà‡∏≠‡∏ô: {original_rows:,} ‡πÅ‡∏ñ‡∏ß\n"
        summary += f"   ‡∏´‡∏•‡∏±‡∏á: {cleaned_rows:,} ‡πÅ‡∏ñ‡∏ß\n"
        summary += f"   ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {cleaned_rows - original_rows:+,} ‡πÅ‡∏ñ‡∏ß\n\n"

        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        original_missing = original.isnull().sum().sum()
        cleaned_missing = cleaned.isnull().sum().sum()
        summary += "üîß ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á:\n"
        summary += f"   ‡∏Å‡πà‡∏≠‡∏ô: {original_missing:,} ‡∏Ñ‡πà‡∏≤\n"
        summary += f"   ‡∏´‡∏•‡∏±‡∏á: {cleaned_missing:,} ‡∏Ñ‡πà‡∏≤\n"
        summary += f"   ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {cleaned_missing - original_missing:+,} ‡∏Ñ‡πà‡∏≤\n\n"

        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        original_duplicates = original.duplicated().sum()
        cleaned_duplicates = cleaned.duplicated().sum()
        summary += "üóëÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥:\n"
        summary += f"   ‡∏Å‡πà‡∏≠‡∏ô: {original_duplicates:,} ‡πÅ‡∏ñ‡∏ß\n"
        summary += f"   ‡∏´‡∏•‡∏±‡∏á: {cleaned_duplicates:,} ‡πÅ‡∏ñ‡∏ß\n"
        summary += f"   ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {cleaned_duplicates - original_duplicates:+,} ‡πÅ‡∏ñ‡∏ß\n\n"

        return summary

    def display_data_in_tree(self, tree, data):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Treeview"""
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
        for item in tree.get_children():
            tree.delete(item)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        columns = list(data.columns)
        tree["columns"] = columns
        tree["show"] = "headings"

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ heading
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=100, minwidth=50)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        for index, row in data.iterrows():
            values = [str(val) if pd.notna(val) else '' for val in row]
            tree.insert("", "end", values=values)

    def apply_advanced_cleaning(self, options_window):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
            return

        try:
            # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
            self.save_to_undo_stack()

            original_rows = len(self.data)
            changes = []

            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

            # 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
            fill_method = getattr(self, 'fill_method_var', None)
            if fill_method:
                missing_before = self.data.isnull().sum().sum()
                self.apply_missing_data_cleaning(fill_method.get())
                missing_after = self.data.isnull().sum().sum()
                if missing_before != missing_after:
                    changes.append(
                        f"‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á: {missing_before - missing_after:,} ‡∏Ñ‡πà‡∏≤")

            # 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
            duplicate_method = getattr(self, 'duplicate_method_var', None)
            if duplicate_method and duplicate_method.get() != 'mark_only':
                dup_before = len(self.data)
                self.apply_duplicate_cleaning(duplicate_method.get())
                dup_after = len(self.data)
                if dup_before != dup_after:
                    changes.append(
                        f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: {dup_before - dup_after:,} ‡πÅ‡∏ñ‡∏ß")

            # 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            outlier_method = getattr(self, 'outlier_method_var', None)
            if outlier_method and outlier_method.get() != 'none':
                outlier_before = len(self.data)
                self.apply_outlier_cleaning(outlier_method.get())
                outlier_after = len(self.data)
                if outlier_before != outlier_after:
                    changes.append(
                        f"‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {outlier_before - outlier_after:,} ‡πÅ‡∏ñ‡∏ß")

            # 4. ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if hasattr(self, 'text_options'):
                self.apply_standardization()
                changes.append("‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            self.update_display()
            self.update_info_panel()            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if changes:
                result_text = "‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:\n" + \
                    "\n".join(f"‚Ä¢ {change}" for change in changes)
            else:
                result_text = "‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            messagebox.showinfo("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", result_text)
            options_window.destroy()

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:\n{str(e)}")

    def apply_missing_data_cleaning(self, method):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return

        if method == 'remove':
            self.data = self.data.dropna()
        elif method == 'custom':
            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            if hasattr(self, 'custom_values'):
                for col, entry in self.custom_values.items():
                    custom_value = entry.get().strip()
                    if custom_value and col in self.data.columns:
                        try:
                            # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                            if self.data[col].dtype in ['int64', 'float64']:
                                custom_value = float(custom_value)
                            self.data[col].fillna(custom_value, inplace=True)
                        except ValueError:
                            self.data[col].fillna(custom_value, inplace=True)
        else:            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            for col in self.data.columns:
                if self.data[col].isnull().any():
                    if self.data[col].dtype in ['int64', 'float64']:
                        if method == 'mean':
                            self.data[col].fillna(
                                self.data[col].mean(), inplace=True)
                        elif method == 'median':
                            self.data[col].fillna(
                                self.data[col].median(), inplace=True)
                        elif method == 'zero':
                            self.data[col].fillna(0, inplace=True)
                        elif method == 'forward':
                            self.data[col] = self.data[col].ffill()
                        elif method == 'backward':
                            self.data[col] = self.data[col].bfill()
                        elif method == 'interpolate':
                            self.data[col].interpolate(inplace=True)
                    else:
                        if method == 'mode':
                            mode_val = self.data[col].mode()
                            if len(mode_val) > 0:
                                self.data[col].fillna(
                                    mode_val[0], inplace=True)
                        elif method == 'forward':
                            self.data[col] = self.data[col].ffill()
                        elif method == 'backward':
                            self.data[col] = self.data[col].bfill()

    def apply_duplicate_cleaning(self, method):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return

        if method == 'first':
            self.data = self.data.drop_duplicates(keep='first')
        elif method == 'last':
            self.data = self.data.drop_duplicates(keep='last')
        elif method == 'all':
            self.data = self.data.drop_duplicates(keep=False)

    def apply_outlier_cleaning(self, method):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return

        action = getattr(self, 'outlier_action_var', None)
        if not action:
            return

        # Additional safety check to ensure data is not None
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return

        # Check if data has numeric columns
        try:
            numeric_columns = self.data.select_dtypes(
                include=[np.number]).columns
            if len(numeric_columns) == 0:
                messagebox.showinfo(
                    "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
                return
        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
            return

        for col in numeric_columns:
            # Additional safety check within the loop
            if self.data is None:
                messagebox.showwarning(
                    "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
                return

            try:
                if method == 'zscore':
                    threshold = getattr(self, 'zscore_threshold',
                                        tk.DoubleVar(value=3.0)).get()
                    z_scores = np.abs(
                        (self.data[col] - self.data[col].mean()) / self.data[col].std())
                    outliers = z_scores > threshold

                    if action.get() == 'remove':
                        self.data = self.data[~outliers]
                    elif action.get() == 'cap':
                        q1 = self.data[col].quantile(0.25)
                        q3 = self.data[col].quantile(0.75)
                        iqr = q3 - q1
                        lower_bound = q1 - 1.5 * iqr
                        upper_bound = q3 + 1.5 * iqr
                        self.data[col] = self.data[col].clip(
                            lower=lower_bound, upper=upper_bound)

                elif method == 'iqr':
                    q1 = self.data[col].quantile(0.25)
                    q3 = self.data[col].quantile(0.75)
                    iqr = q3 - q1
                    lower_bound = q1 - 1.5 * iqr
                    upper_bound = q3 + 1.5 * iqr
                    outliers = (self.data[col] < lower_bound) | (
                        self.data[col] > upper_bound)

                    if action.get() == 'remove':
                        self.data = self.data[~outliers]
                    elif action.get() == 'cap':
                        self.data[col] = self.data[col].clip(
                            lower=lower_bound, upper=upper_bound)

            except Exception as e:
                messagebox.showerror(
                    "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {col}: {str(e)}")
                continue

    def apply_standardization(self):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if self.data is None:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
            return

        if not hasattr(self, 'text_options'):
            return

        for col in self.data.select_dtypes(include=['object']).columns:
            # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if self.text_options.get('remove_whitespace', tk.BooleanVar()).get():
                self.data[col] = self.data[col].astype(str).str.strip()

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå
            if self.text_options.get('standardize_case', tk.BooleanVar()).get():
                self.data[col] = self.data[col].astype(str).str.title()

            # ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
            if self.text_options.get('remove_special_chars', tk.BooleanVar()).get():
                self.data[col] = self.data[col].astype(
                    str).str.replace(r'[^\w\s]', '', regex=True)

    def save_cleaning_template(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï"""
        template_name = simpledialog.askstring(
            "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï", "‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï:")
        if not template_name:
            return

        template = {
            'name': template_name,
            'fill_method': getattr(self, 'fill_method_var', tk.StringVar()).get(),
            'duplicate_method': getattr(self, 'duplicate_method_var', tk.StringVar()).get(),
            'outlier_method': getattr(self, 'outlier_method_var', tk.StringVar()).get(),
            'outlier_threshold': getattr(self, 'zscore_threshold', tk.DoubleVar()).get(),
            'outlier_action': getattr(self, 'outlier_action_var', tk.StringVar()).get(),
            'created_date': datetime.now().isoformat()
        }

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
        templates_file = 'cleaning_templates.json'
        try:
            if os.path.exists(templates_file):
                with open(templates_file, 'r', encoding='utf-8') as f:
                    templates = json.load(f)
            else:
                templates = {}

            templates[template_name] = template

            with open(templates_file, 'w', encoding='utf-8') as f:
                json.dump(templates, f, ensure_ascii=False, indent=2)

            messagebox.showinfo(
                "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï '{template_name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

        except Exception as e:
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÑ‡∏î‡πâ:\n{str(e)}")

    def save_to_undo_stack(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á undo stack"""
        if self.data is not None:
            self.undo_stack.append(self.data.copy())
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î undo stack
            if len(self.undo_stack) > 10:
                self.undo_stack.pop(0)
            # ‡∏•‡πâ‡∏≤‡∏á redo stack
            self.redo_stack.clear()

    def show_help(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        help_window = tk.Toplevel(self.root)
        help_window.title("üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        help_window.geometry("600x500")

        text_widget = tk.Text(help_window, wrap='word')
        scrollbar = ttk.Scrollbar(
            help_window, orient="vertical", command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)

        help_content = """üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:
1. ‡∏Ñ‡∏•‡∏¥‡∏Å "üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel)
2. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π "‡πÑ‡∏ü‡∏•‡πå > ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

üßπ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ "üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" - ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
‚Ä¢ "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥" - ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
‚Ä¢ "üîß ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á" - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
‚Ä¢ "üßº ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á" - ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤

‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
‚Ä¢ "üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
‚Ä¢ "üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û" - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‚Ä¢ "üìã ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö" - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î

üíæ ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:
‚Ä¢ "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
‚Ä¢ "üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î

üéÆ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
‚Ä¢ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ  
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç: ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç

‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°?
‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
"""

        text_widget.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        text_widget.insert('1.0', help_content)
        text_widget.config(state='disabled')

    def show_tips(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        tips = [
            "üí° ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏°‡∏≠",
            "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î",
            "‚öôÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            "üìä ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            "üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏≠‡∏≠‡∏Å",
            "üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        ]

        tip_text = "üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n\n" + "\n\n".join(tips)
        messagebox.showinfo("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö", tip_text)

    def show_examples(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        examples = """üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:

üìù ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
‚Ä¢ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ‚Üí ‡πÉ‡∏ä‡πâ "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥"
‚Ä¢ ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÉ‡∏ä‡πâ "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á" (‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢)
‚Ä¢ ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (999) ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ "‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"

üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô ‚Üí "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
‚Ä¢ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚Üí "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‚Üí "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"

üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 3: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
‚Ä¢ ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á ‚Üí "‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á"
‚Ä¢ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‚Üí "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
‚Ä¢ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Üí "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"
"""
        messagebox.showinfo("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", examples)

    def show_about(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        about_text = """üßπ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô üáπüá≠

‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 2.0
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢: ‡πÑ‡∏ï‡∏£‡∏ó‡∏® ‡∏ó‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏î 097-191-2502

‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞ Excel
‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö

¬© 2025 All Rights Reserved
"""
        messagebox.showinfo("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö", about_text)


def main():
    root = tk.Tk()
    app = DataCleaningApp(root)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    try:
        root.state('zoomed')  # ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡πÉ‡∏ô Windows
    except:
        root.attributes('-zoomed', True)  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    try:
        root.iconbitmap('icon.ico')
    except:
        pass

    try:
        root.mainloop()
    except KeyboardInterrupt:
        root.destroy()


if __name__ == "__main__":
    main()
